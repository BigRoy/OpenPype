"""Basic cbId management to mimic Maya implementation"""
import uuid

from openpype.client import (
    get_asset_by_name,
)
from openpype.pipeline import (
    get_current_project_name,
    get_current_asset_name,
)

import bpy

ID_ATTR = "cbId"


def get_id(node):
    """Get the `cbId` attribute of the given node.

    Args:
        node (str): the name of the node to retrieve the attribute from
    Returns:
        str

    """
    if not node:
        return

    return node.get(ID_ATTR)


def generate_ids(nodes, asset_id=None):
    """Returns new unique ids for the given nodes.

    Note: This does not assign the new ids, it only generates the values.

    To assign new ids using this method:
    >>> nodes = ["a", "b", "c"]
    >>> for node, id in generate_ids(nodes):
    >>>     set_id(node, id)

    To also override any existing values (and assign regenerated ids):
    >>> nodes = ["a", "b", "c"]
    >>> for node, id in generate_ids(nodes):
    >>>     set_id(node, id, overwrite=True)

    Args:
        nodes (list): List of nodes.
        asset_id (str or bson.ObjectId): The database id for the *asset* to
            generate for. When None provided the current asset in the
            active session is used.

    Returns:
        list: A list of (node, id) tuples.

    """

    if asset_id is None:
        # Get the asset ID from the database for the asset of current context
        project_name = get_current_project_name()
        asset_name = get_current_asset_name()
        asset_doc = get_asset_by_name(project_name, asset_name, fields=["_id"])
        assert asset_doc, "No current asset found in Session"
        asset_id = asset_doc['_id']

    node_ids = []
    for node in nodes:
        _, uid = str(uuid.uuid4()).rsplit("-", 1)
        unique_id = "{}:{}".format(asset_id, uid)
        node_ids.append((node, unique_id))

    return node_ids


def set_id(node, unique_id, overwrite=False):
    """Add cbId to `node` unless one already exists.

    Args:
        node (bpy.node): the node to add the "cbId" on
        unique_id (str): The unique node id to assign.
            This should be generated by `generate_ids`.
        overwrite (bool, optional): When True overrides the current value even
            if `node` already has an id. Defaults to False.

    Returns:
        None

    """
    exists = node.get(ID_ATTR) is not None

    # Set the value
    if not exists or overwrite:
        node[ID_ATTR] = unique_id


def get_id_required_nodes(nodes):
    # Include meshes and curves
    id_required_nodes = list(nodes)
    for obj in nodes:
        obj_data = obj.data
        if isinstance(obj_data, (
                bpy.types.Mesh,
                bpy.types.Curve,
                bpy.types.SurfaceCurve
        )):
            id_required_nodes.append(obj_data)
    return id_required_nodes
